@page "/projects/edit/{id:int}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using ProjectBank.Core
@using ProjectBank.Shared.forms
@using System.Linq
@attribute [Authorize (Roles = "Supervisor")]
@implements IDisposable
@inject ILogger<CreatePost> _logger
@inject NavigationManager _uriHelper;
@inject HttpClient _http

<PageTitle>Edit post</PageTitle>
<Content>
    <Padding>
        @if (_post == null)
        {
            <h1>Loading...</h1>
        }
        else
        {
            <h1>Edit post</h1>
            <EditForm EditContext="@_editContext" OnValidSubmit="@HandleValidSubmit">
                <DataAnnotationsValidator/>
                <ValidationSummary/>
                <div class="form-floating my-3">
                    <InputText id="title" class="form-control" placeholder="Title of the project"
                               @bind-Value="_postFormModel.Title"/>
                    <label for="title">Title</label>
                </div>
                <div class="form-floating my-3">
                    <InputTextArea id="content" class="form-control" placeholder="Content of the project" style="height: 100px"
                                   @bind-Value="_postFormModel.Content">
                    </InputTextArea>
                    <label for="content">Content</label>
                </div>
                <InputTag Id="tags" Label="test" DefaultTags="@Tags" @bind-Value="_postFormModel.Tags"></InputTag>
                <div class="d-grid gap-2 col-6 mx-auto">
                    <button type="submit" class="btn btn-outline-primary btn-lg" disabled="@_formInvalid">Submit</button>
                </div>
            </EditForm>
        }
    </Padding>
</Content>

@code {

    [Parameter]
    public int Id { get; set; }

    private PostDetailsDto? _post;
    private string Tags { get; set; }
    private readonly PostFormModel _postFormModel = new();

    private bool _formInvalid = false;
    private EditContext? _editContext;

    protected override void OnInitialized()
    {
        Tags = "";
        _editContext = new EditContext(_postFormModel);
        _editContext.OnFieldChanged += HandleFieldChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _post = await _http.GetFromJsonAsync<PostDetailsDto>("api/Post/" + Id);
            _postFormModel.Title = _post.Title;
            _postFormModel.Content = _post.Content;
            _postFormModel.Tags = string.Join(", ", _post.Tags);
            _logger.LogInformation(_postFormModel.Tags);
            Tags = _postFormModel.Tags;
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private void HandleFieldChanged(object? sender, FieldChangedEventArgs e)
    {
        if (_editContext is null) return;
        _formInvalid = !_editContext.Validate();
        StateHasChanged();
    }

    private async void HandleValidSubmit()
    {
        _logger.LogInformation("EditPost called");
        var tags = new HashSet<string>();
        /*DO NOT DELETE this if statement even if the IDE says that it is always true*/
        if (_postFormModel.Tags != null && _postFormModel.Tags.Length > 0)
        {
            tags = _postFormModel.Tags.Split(",").Select(t => t.Trim().ToUpper()).ToHashSet();
        }
        var postUpdateDto = new PostUpdateDto()
        {
            Id = _post.Id,
            Title = _postFormModel.Title,
            Content = _postFormModel.Content,
            UserOid = _post.UserOid,
            ViewCount = _post.ViewCount,
            PostState = _post.PostState,
            Tags = tags
        };
        var response = await _http.PutAsJsonAsync("api/Post/" + _post.Id, postUpdateDto);
        if (response.IsSuccessStatusCode)
        {
            _uriHelper.NavigateTo("/Projects/" + _post.Id);
        }
        else
        {
            _logger.LogCritical("Critical status code: " + response.StatusCode);
        }
    }

    public void Dispose()
    {
        if (_editContext is not null)
        {
            _editContext.OnFieldChanged -= HandleFieldChanged;
        }
    }

}
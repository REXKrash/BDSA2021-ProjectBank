@page "/projects/author/{supervisorOid}"
@using ProjectBank.Core
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject HttpClient _http
@inject ILocalStorageService _localStore

<PageTitle>Project Bank - Viewing posts by @Supervisor?.Name</PageTitle>
<Content>
    <Padding>
        @if (UnknownSupervisor)
        {
            <p>Supervisor with id of @SupervisorOid not found</p>
        }
        else
        {
            <p>Showing all posts by @Supervisor?.Name</p>
            @if (_posts != null)
            {
                if (_posts.Count == 0)
                {
                    <p>No posts to show</p>
                }
                else
                {
                    @foreach (var post in _posts)
                    {
                        if (post.PostState.Equals(PostState.Active))
                        {
                            <PostContainer Title="@post.Title" Content="@post.Content" SupervisorId="@post.UserOid"
                                           Tags="@post.Tags" DateAdded="@post.DateAdded" PostId="@post.Id">
                            </PostContainer>
                        }
                    }
                }
            }
            else
            {
                <p>Loading...</p>
            }
        }
    </Padding>
</Content>

@code
{
    [Parameter]
    public string SupervisorOid { get; set; }

    private bool UnknownSupervisor { get; set; } = false;
    private UserDetailsDto? Supervisor { get; set; }

    private List<PostDetailsDto>? _posts;
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            _posts = await _http.GetFromJsonAsync<List<PostDetailsDto>>($"api/Post/supervisor/{SupervisorOid}");
            _posts = _posts?.OrderByDescending(dto => dto.DateAdded).ToList();
            Supervisor = await _http.GetFromJsonAsync<UserDetailsDto>($"api/User/{SupervisorOid}");
            if (Supervisor == null) UnknownSupervisor = true;
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
}
@page "/Projects/{id:int}"
@using ProjectBank.Core
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject HttpClient _http
@inject ILocalStorageService localStore

<Content>
    <ChildContent>
        @if (Post == null)
        {
            <h3>Post not found</h3>
        }
        else
        {
            <div class="d-flex flex-md-row flex-sm-column align-items-md-stretch align-items-center justify-content-around">
                <div class="align-self-baseline col-md-8 col-10">
                    <div class="p-4 shadow">
                        <h3>@Post.Title</h3>

                        <small class="italic">Published on: @Post?.DateAdded.ToLongDateString()</small>
                        <p>@Post?.Content</p>
                        <div class="flex">
                            @if (@Post != null && @Post?.Tags != null)
                            {
                                foreach (var tag in @Post.Tags)
                                {
                                    <Tag Name="@tag"></Tag>
                                }
                            }
                        </div>
                    </div>

                    <CommentSection post="@Post"></CommentSection>
                </div>
                <div class="col-md-3 col-10">
                    <div class="shadow p-4 text-center m-2">
                        <img alt="Profile picture of supervisor" class="rounded-circle shadow supervisor-image"
                             src="@Creator?.image">
                        <h3>@Creator?.Name</h3>
                        <p>Email: <a href="mailto:randommail@mail.com">Change@me.com</a></p>
                        <p>All projects: <a href="/projects/supervisor/@Creator?.oid">View</a></p>
                    </div>

                    <div class="d-grid my-4 p-4 shadow text-center">
                        <!--!-->
                        <a href="/messages/create/supervisor/@Creator?.oid" class="btn btn-block btn-primary m-2">Contact</a>
                        <button @onclick="@(() => Modal.Show<ApplyModal>("Modal Popup Example", ApplyModalParameters))" class="btn btn-primary m-2">Apply</button>
                    </div>
                    <div class="d-grid my-4 p-4 shadow text-center">
                        <!--!-->
                        <a href="/projects/edit/@Id" class="btn btn-primary m-2">Edit</a>
                        <a href="/messages/?filter=@Id" class="btn btn-success m-2">View related conversations</a>
                    </div>
                </div>
            </div>
        }
    </ChildContent>
</Content>

@code {

    [Parameter]
    public int Id { get; set; }

    [CascadingParameter] public IModalService Modal { get; set; }
    
    private PostDto? Post { get; set; }
    private UserDetailsDto? Creator { get; set; }
    private UserDetailsDto currentUser { get; set; }
    private ModalParameters ApplyModalParameters { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        currentUser = await localStore.GetItemAsync<UserDetailsDto>("user");
        try
        {
            Post = await _http.GetFromJsonAsync<PostDto>("api/Post/" + Id);
            Creator = await _http.GetFromJsonAsync<UserDetailsDto>("api/User/" + Post?.SupervisorOid);
            ApplyModalParameters = new ModalParameters();
            ApplyModalParameters.Add("CurrentUser", currentUser);
            ApplyModalParameters.Add("Post", Post);
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
}

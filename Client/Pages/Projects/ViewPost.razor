@page "/Projects/{id:int}"
@using ProjectBank.Core
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject HttpClient _http
@inject ILocalStorageService _localStore
@inject IJSRuntime _js
@inject NavigationManager _uriHelper

<Content>
    <Padding>
        @if (Post == null)
        {
            @if (Notfound)
            {
                <h3>Post not found</h3>
            }
            else
            {
                <h3>Loading...</h3>
            }
        }
        else
        {
            <div class="d-flex flex-md-row flex-sm-column align-items-md-stretch align-items-center justify-content-around">
                <div class="align-self-baseline col-md-8 col-10">
                    <div class="p-4 shadow">
                        <h3>@Post.Title</h3>

                        <small class="italic">Published on: @Post?.DateAdded.ToLongDateString()</small>
                        <small>
                            Current state:
                            @if (Post?.PostState != null)
                            {
                                <Span>@Post?.PostState</Span>
                            }
                            else
                            {
                                <span>Active</span>
                            }
                        </small>
                        <p>@Post?.Content</p>
                        <div class="flex">
                            @if (@Post != null && @Post?.Tags != null)
                            {
                                foreach (var tag in @Post.Tags)
                                {
                                    <Tag Name="@tag"></Tag>
                                }
                            }
                        </div>
                    </div>

                    <CommentSection CurrentUser="@CurrentUser" post="@Post"></CommentSection>
                </div>
                <div class="col-md-3 col-10">

                    @if (Creator != null)
                    {
                        <div class="shadow p-4 text-center m-2">
                            <img alt="Profile picture of supervisor" class="rounded-circle shadow supervisor-image"
                                 src="@Creator?.Image">
                            <h3>@Creator?.Name</h3>
                            <p>Email: <a href="mailto:@Creator?.Email">@Creator?.Email</a></p>
                            <p>All projects:<a href="/projects/author/@Creator?.Oid">View</a></p>
                        </div>

                        <AuthorizeView Roles="Student">
                            <div class="d-grid my-4 p-4 shadow text-center">
                                <!--!-->
                                <a href="/messages/create/@Creator?.Oid"
                                   class="btn btn-block btn-primary m-2">
                                    Contact
                                </a>
                                @if (Post is {PostState: PostState.Active })
                                {
                                    <button @onclick="@(() => Modal.Show<ApplyModal>("Apply for project", ApplyModalParameters))"
                                            class="btn btn-primary m-2">
                                        Apply
                                    </button>
                                }
                            </div>
                        </AuthorizeView>
                    }
                    @if (CurrentUser.Oid == Post?.UserOid)
                    {
                        <div class="d-grid my-4 p-4 shadow text-center">
                            <!--!-->
                            <small>
                                This post has been viewed @((Post.ViewCount + 1).ToString())
                                @if (Post.ViewCount == 0)
                                {
                                    <span> time</span>
                                }
                                else
                                {
                                    <span> times</span>
                                }
                            </small>
                            <a href="/projects/edit/@Id" class="btn btn-primary m-2">Edit</a>
                            <a href="/messages/?filter=@Id" class="btn btn-success btn-view-conversations m-2">
                                View related
                                conversations
                            </a>
                            <button class="btn btn-delete m-2" onclick=@DeletePost>Delete</button>
                        </div>
                    }
                </div>
            </div>
        }
    </Padding>
</Content>

@code {

    [Parameter]
    public int Id { get; set; }

    [CascadingParameter]
    public IModalService Modal { get; set; }

    private bool Notfound { get; set; }
    private PostDetailsDto? Post { get; set; }
    private UserDetailsDto? Creator { get; set; }
    private UserDetailsDto CurrentUser { get; set; }
    private ModalParameters ApplyModalParameters { get; set; }

    protected override async Task OnInitializedAsync()
    {
        CurrentUser = await _localStore.GetItemAsync<UserDetailsDto>("user");
        try
        {
            Post = await _http.GetFromJsonAsync<PostDetailsDto>("api/Post/" + Id);
            if (Post == null)
            {
                Notfound = true;
            }
            Creator = await _http.GetFromJsonAsync<UserDetailsDto>("api/User/" + Post?.UserOid);
            ApplyModalParameters = new ModalParameters();
            ApplyModalParameters.Add("CurrentUser", CurrentUser);
            ApplyModalParameters.Add("Post", Post);
            await _http.GetAsync($"api/Post/increment-view/{Post?.Id}");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async void DeletePost()
    {
        var confirmed = await _js.InvokeAsync<bool>("confirm", "Are you sure you want to delete this post?"); // Confirm

        if (!confirmed) return;

        try
        {
            var deleteResponse = await _http.DeleteAsync($"api/Post/{Post?.Id}");
            if (deleteResponse.IsSuccessStatusCode)
            {
                _uriHelper.NavigateTo($"/");
            }
            else
            {
                await _js.InvokeAsync<bool>("alert", "Failed to delete post");
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }




}
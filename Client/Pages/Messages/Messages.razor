@page "/Messages"
@using ProjectBank.Core
@using ProjectBank.Client.Extensions
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.Authorization
@using ProjectBank.Shared.forms
@using System.ComponentModel.DataAnnotations
@attribute [Authorize]
@inject NavigationManager _uriHelper;
@inject HttpClient _http
@inject ILocalStorageService _localStore
@inject IJSRuntime _jsRuntime
@implements IDisposable
<div class="d-flex flex-nowrap messageContainer col-12">
    <div class="d-flex flex-column col-4 align-items-stretch flex-shrink-0 bg-white messagesSideBar">
        <div
            class="d-flex align-items-center justify-content-between flex-shrink-0 p-3 link-dark text-decoration-none border-bottom">
            <span class="fs-5 fw-semibold">Messages</span>
            <EditForm EditContext="@_filterEditContext">
                <AuthorizeView Context="Auth" Roles="Supervisor">
                    <InputSelect class="form-select" @bind-Value="@_filterModel.Title">
                        <option selected>Filter by project</option>
                        @if (_posts != null)
                        {
                            foreach (var post in _posts)
                            {
                                @if (post.Id == _filter)
                                {
                                    <option selected="selected">@post.Title</option>
                                }
                                else
                                {
                                    <option>@post.Title</option>
                                }
                            }
                        }
                    </InputSelect>
                </AuthorizeView>
            </EditForm>
        </div>
        <div class="list-group list-group-flush border-bottom scrollarea message-list">
            @if (Chats == null || Chats.Count == 0)
            {
                <p>You have no active chats</p>
            }
            else
            {
                @foreach (var chatDetailsDto in Chats)
                {
                    <div @onclick="@(() => SelectChat(chatDetailsDto))">
                        <MessageItem Active="@(_chat != null && _chat.ChatId == chatDetailsDto.ChatId)" Chat="@chatDetailsDto">
                        </MessageItem>
                    </div>
                }
            }
        </div>
    </div>
    <div class="d-flex flex-column chat-area col-8">
        @if (_chatMessages == null || _chat == null)
        {
            <p>Select a chat</p>
        }
        else
        {
            <div
            class="d-flex align-items-center justify-content-between flex-shrink-0 p-3 link-dark text-decoration-none border-bottom">
                <span class="fs-5 fw-semibold"></span>
                <span class="fs-5 fw-semibold">@_chatRecipient?.Name</span>
                <span class="fs-5 fw-semibold"></span>
            </div>
            <div class="chat-area-inner d-flex flex-row align-items-end">
                <div class="chat-messages scrollarea">
                    @foreach (var message in _chatMessages)
                    {
                        <MessageComponent Text="@message.Content" Received="@(!message.FromUser.Oid.Equals(_currentUser.Oid))">
                        </MessageComponent>
                    }
                </div>
            </div>
            <EditForm Model="_messageModel" OnValidSubmit="@HandleValidMessageSubmit">
                <div class="align-content-center chat-area-input d-flex p-2 row">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="col-9">
                        <InputText @bind-Value="_messageModel.Message" type="text" id="message-input" class="form-control" />
                    </div>
                    <div class="col-3 d-flex">
                        <button type="submit" class="btn btn-primary col-12">Submit</button>
                    </div>
                </div>
            </EditForm>
        }
    </div>
</div>

@code {

    private List<PostDetailsDto>? _posts;

    private string _filterSelectValue;

    private string FilterSelectValue
    {
        get => _filterSelectValue;
        set
        {
            _filterSelectValue = value;
            var post = GetPostByTitle(value);
            if (post == null) _filter = -1;
            else _filter = post.Id;
            UpdateQuery();
        }
    }

    private int _filter = -1;

    private ChatDetailsDto? _chat;
    private ICollection<ChatMessageDto>? _chatMessages;
    private UserDetailsDto? _chatRecipient;

    private EditContext _filterEditContext;
    private readonly MessageModel _messageModel = new();
    private readonly FilterModel _filterModel = new();

    private class MessageModel
    {
        [Required]
        [MinLength(1)]
        public string Message { get; set; }
    }


    protected override void OnInitialized()
    {
        _filterEditContext = new EditContext(_filterModel);
        _filterEditContext.OnFieldChanged += HandleFilterFieldChanged;

        var filter = _uriHelper.QueryString("filter");
        if (filter != null && filter.Trim() != "" && filter.Trim() != "-1") this._filter = Convert.ToInt32(filter);
    }

    private IReadOnlyCollection<ChatDetailsDto>? AllChats { get; set; }
    private IReadOnlyCollection<ChatDetailsDto>? Chats { get; set; }
    private UserDetailsDto _currentUser;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _currentUser = await _localStore.GetItemAsync<UserDetailsDto>("user");
            var postsRes = await _http.GetAsync($"api/Post/supervisor/{_currentUser.Oid}");
            if (postsRes.IsSuccessStatusCode)
            {
                _posts = await postsRes.Content.ReadFromJsonAsync<List<PostDetailsDto>>();
            }
            AllChats = await _http.GetFromJsonAsync<IReadOnlyCollection<ChatDetailsDto>>($"api/Chat/user/{_currentUser.Oid}");
            if (AllChats != null) Chats = new List<ChatDetailsDto>(AllChats);
            UpdateFilter();
            var _chat = _uriHelper.QueryString("chat");
            if (_chat != null && _chat.Trim() != "")
            {
                var chatid = Convert.ToInt32(_chat);
                this._chat = await _http.GetFromJsonAsync<ChatDetailsDto>($"api/Chat/{chatid}/{_currentUser.Oid}");
                SelectChat(this._chat);
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private void HandleFilterFieldChanged(object? sender, FieldChangedEventArgs e)
    {
        if (_filterEditContext is null) return;
        FilterSelectValue = _filterModel.Title;
    }

    private async void HandleValidMessageSubmit()
    {
        var chatMessageCrateDto = new ChatMessageCreateDto()
        {
            ChatId = _chat.ChatId,
            Content = _messageModel.Message,
            FromUserOid = _currentUser.Oid
        };
        var res = await _http.PostAsJsonAsync<ChatMessageCreateDto>("api/chat/message", chatMessageCrateDto);
        if (!res.IsSuccessStatusCode) return;
        _chatMessages?.Add(new ChatMessageDto()
        {
            Content = _messageModel.Message,
            FromUser = _currentUser,
            Timestamp = DateTime.Now
        });
        _messageModel.Message = "";
        StateHasChanged();
    }

    private async void SelectChat(ChatDetailsDto? chatDetailsDto)
    {
        _chat = chatDetailsDto;
        if (_chat != null)
        {
            _chatMessages = (await _http.GetFromJsonAsync<IReadOnlyCollection<ChatMessageDto>>($"api/Chat/{_chat.ChatId}/messages") ??
            new List<ChatMessageDto>())
            .Select(m => m).ToList();
            _chatRecipient = await _http.GetFromJsonAsync<UserDetailsDto>($"api/User/{_chat.TargetUserOid}");
            if (!_chat.SeenLatestMessage)
            {
                var res = await _http.PutAsync($"api/Chat/{_chat.ChatId}/seen/{_currentUser.Oid}", null);

            }
            UpdateQuery();
            StateHasChanged();
        }
    }

    private void UpdateQuery()
    {
        string urlString = $"{_uriHelper.BaseUri}/messages";
        bool addedQuery = false;
        if (_filter != -1)
        {
            urlString += "?filter=" + _filter;
            addedQuery = true;
        }
        if (_chat != null)
        {
            if (addedQuery)
            {
                urlString += "&chat=" + _chat.ChatId;
            }
            else
            {
                urlString += "?chat=" + _chat.ChatId;
            }
        }
        _jsRuntime.InvokeVoidAsync("ChangeUrl", urlString);
        if (AllChats != null) Chats = new List<ChatDetailsDto>(AllChats);
        UpdateFilter();
    }

    private void UpdateFilter()
    {
        if (_filter != -1) if (AllChats != null) Chats = AllChats.Where(c => c.ProjectId == _filter).ToList();
        StateHasChanged();
    }

    private PostDetailsDto? GetPostByTitle(string title) =>
    _posts?.FirstOrDefault(p => p.Title == title);

    public void Dispose()
    {
        if (_filterEditContext is not null)
        {
            _filterEditContext.OnFieldChanged -= HandleFilterFieldChanged;
        }
    }

}
@page "/authentication/{action}"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Security.Claims
@using ProjectBank.Client.Extensions
@using ProjectBank.Core
@using System.Net
@inject ILogger<Authentication> Logger
@inject HttpClient _http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILocalStorageService localStore


<Content>
    <Padding>
        <RemoteAuthenticatorView Action="@Action" OnLogInSucceeded="@OnLoginSuccess" OnLogOutSucceeded="@_clearLocalStorageFromUser"/>
    </Padding>
</Content>

@code {

    [Parameter]
    public string? Action { get; set; }

    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();

    private async void OnLoginSuccess()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var authUser = authState.User;

        if (authUser.Identity is not {IsAuthenticated: true }) return;
        claims = authUser.Claims;
        var enumerableClaims = claims.ToList();
        var oidClaim = enumerableClaims.GetClaim("oid");
        var emailClaim = enumerableClaims.GetClaim("email");
        var nameClaim = authUser.Identity.Name;

        var getRes = await _http.GetAsync("api/User/" + oidClaim);
        if (getRes.IsSuccessStatusCode)
        {
            var user = await getRes.Content.ReadFromJsonAsync<UserDetailsDto>();
            if (user != null) _setLocalStorageFromUser(user);
            return;
        }
        if (!getRes.StatusCode.Equals(HttpStatusCode.NotFound))
        {
            //TODO: HANDLE ERRORS
        }
        //User does not exist
        var postRes = await _http.PostAsJsonAsync("api/User/", new UserCreateDto{oid = oidClaim, Name = nameClaim, IsSupervisor = true});
        if (postRes.IsSuccessStatusCode)
        {
            var user = await postRes.Content.ReadFromJsonAsync<UserDetailsDto>();
            if (user != null) _setLocalStorageFromUser(user);
            Logger.LogInformation("Successfully created user");
        }
        else
        {
            //TODO: MAKE ERROR HANDLING
        }
    }

    
    
    private async void _setLocalStorageFromUser(UserDetailsDto user)
    {
        await localStore.SetItemAsync("user", user);
    }

    private async void _clearLocalStorageFromUser()
    {
        if (await localStore.ContainKeyAsync("user"))
        {
            await localStore.RemoveItemAsync("user");
        }
    }
}
@page "/authentication/{action}"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Security.Claims
@using ProjectBank.Client.Extensions
@using ProjectBank.Core
@using System.Net
@inject ILogger<Authentication> Logger
@inject HttpClient _http
@inject AuthenticationStateProvider AuthenticationStateProvider

<Content>
    <ChildContent>
        <RemoteAuthenticatorView Action="@Action" OnLogInSucceeded="@OnLoginSuccess"/>
    </ChildContent>
</Content>

@code {

    [Parameter]
    public string? Action { get; set; }

    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();

    private async void OnLoginSuccess()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is not {IsAuthenticated: true }) return;
        claims = user.Claims;
        var oidClaim = claims.GetClaim("oid");
        var emailClaim = claims.GetClaim("email");
        var nameClaim = user.Identity.Name;
        Logger.LogInformation(oidClaim);
        Logger.LogInformation(emailClaim);
        Logger.LogInformation(nameClaim);

        var res = await _http.GetAsync("api/User/" + oidClaim);
        if (res.IsSuccessStatusCode) return;
        if (!res.StatusCode.Equals(HttpStatusCode.NotFound))
        {
            //TODO: HANDLE ERRORS
        }
        //User does not exist
        var _response = await _http.PostAsJsonAsync("api/User/", new UserCreateDto{oid = oidClaim, Name = nameClaim, IsSupervisor = true});
        if (_response.IsSuccessStatusCode)
        {
            
            Logger.LogInformation("Successfully created user");
        }
        else
        {
            //TODO: MAKE ERROR HANDLING
        }
    }

}
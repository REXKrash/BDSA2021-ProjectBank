@using Core
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@attribute [Authorize]
@inject HttpClient Http

<p>Loaded test posts:</p>
@if (@Posts != null)
{
    @for (int i = 0; i < @Posts.Count; i++)
    {
        <p>
            @Posts[@i].Title
            @Posts[@i].Content
            @Posts[@i].SupervisorId
            @Posts[@i].DateAdded

            @if (@i != @Posts.Count - 1)
            {
                <span>,</span>
            }
            @if (@PostComments.ContainsKey(@i))
            {
                @for (int j = 0; j < @PostComments.GetValueOrDefault(@i).Count; j++)
                {
                <p>
                        @PostComments.GetValueOrDefault(@i)[@j].Content
                </p>
                }
            }
        </p>
    }
}

@code {
    private List<PostDto>? Posts;
    private Dictionary<int, List<CommentDto>?> PostComments = new Dictionary<int, List<CommentDto>?>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Posts = await Http.GetFromJsonAsync<List<PostDto>>("api/Post");

            foreach (var post in Posts)
            {
                PostComments.Add(post.Id, await Http.GetFromJsonAsync<List<CommentDto>>("api/Post/" + post.Id + "/comments"));
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    public async Task<List<CommentDto>> GetComments(int postId)
    {
        return await Http.GetFromJsonAsync<List<CommentDto>>("api/Post/" + postId + "/comments");
    }

}

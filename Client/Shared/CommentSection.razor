@using ProjectBank.Core
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject HttpClient _http
@implements IDisposable
@inject ILogger<CommentSection> _logger
@inject NavigationManager _uriHelper;
@inject ILocalStorageService _localStore
@inject IJSRuntime _jsRuntime

<div class="container my-4">
    <div class="row d-flex justify-content-center">
        <div class="px-4 shadow">
            @if (PostComments == null)
            {
                <p>Loading...</p>
            }
            else
            {
                @foreach (var comment in PostComments)
                {
                    <Comment CurrentUser="@CurrentUser" CurrentPost="@Post" UserId="@comment.UserOid" CommentId="@comment.Id"
                Published="@comment.DateAdded" Content="@comment.Content"></Comment>
                }
            }
            @if (Post.PostState.Equals(PostState.Active))
            {
                <EditForm EditContext="@_editContext" OnValidSubmit="@HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="d-flex my-4">
                        <div class="col-9">
                            <InputText @bind-Value="_commentModel.Comment" type="text" id="comment-input"
                            class="form-control" placeholder="Message" />
                        </div>
                        <div class="col-3 d-flex">
                            <button type="submit" class="btn btn-primary col-12" disabled="@_formInvalid">Comment</button>
                        </div>
                    </div>
                </EditForm>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public PostDetailsDto Post { get; set; }

    [Parameter]
    public UserDetailsDto CurrentUser { get; set; }

    private IList<CommentDetailsDto>? PostComments { get; set; }
    private readonly CommentModel _commentModel = new();

    private EditContext? _editContext;
    private bool _formInvalid = true;

    protected override void OnInitialized()
    {
        _editContext = new EditContext(_commentModel);
        _editContext.OnFieldChanged += HandleFieldChanged;
    }

    private void HandleFieldChanged(object? sender, FieldChangedEventArgs e)
    {
        if (_editContext is null) return;
        _formInvalid = !_editContext.Validate();
        StateHasChanged();
    }

    private async void HandleValidSubmit()
    {
        var user = await _localStore.GetItemAsync<UserDetailsDto>("user");
        var comment = new CommentCreateDto
        {
            Content = _commentModel.Comment,
            UserOid = user.Oid,
            postid = Post.Id
        };

        var notification = new NotificationCreateDto
        {
            Title = "New comment",
            Content = $"{user.Name} has commented on your post",
            UserOid = Post.UserOid,
            Link = $"/projects/{Post.Id}"
        };
        var response = await _http.PostAsJsonAsync("api/Comment", comment);
        if (response.IsSuccessStatusCode)
        {
            if (!CurrentUser.Oid.Equals(Post.UserOid))
            {
                await _http.PostAsJsonAsync("api/Notification", notification);
            }
            _uriHelper.NavigateTo(_uriHelper.Uri, forceLoad: true);
        }
        else
        {
            await _jsRuntime.InvokeAsync<bool>("alert", "Error detected while handling creation of comment");
            _logger.LogCritical("Critical status code: " + response.StatusCode);
        }

        // Process the valid form
    }

    public void Dispose()
    {
        if (_editContext is not null)
        {
            _editContext.OnFieldChanged -= HandleFieldChanged;
        }
    }

    class CommentModel
    {
        public string Comment { get; set; }
    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            PostComments = await _http.GetFromJsonAsync<List<CommentDetailsDto>>("api/Post/" + Post.Id + "/comments");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
}

@using ProjectBank.Core
@using System.Net
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.Extensions.DependencyInjection
@inject HttpClient _http
@implements IDisposable
@inject ILogger<CommentSection> Logger
@inject NavigationManager uriHelper;

@inject ILocalStorageService localStore

<div class="container my-4">
    <div class="row d-flex justify-content-center">
        <div class="px-4 shadow">
            @if (_postComments == null)
            {
                <p>Loading...</p>
            }
            else
            {
                @foreach (var comment in _postComments)
                {
                    <Comment UserID="@comment.UserId" CommentID="@comment.Id" Published="@comment.DateAdded"
                Content="@comment.Content"></Comment>
                }
            }
            <EditForm EditContext="@editContext" OnValidSubmit="@HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="d-flex my-4">
                    <div class="col-9">
                        <InputText @bind-Value="commentModel.comment" type="text" id="comment-input"
                            class="form-control" placeholder="Message" />
                    </div>
                    <div class="col-3 d-flex">
                        <button type="submit" class="btn btn-primary col-12" disabled="@formInvalid">Comment</button>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public PostDto Post { get; set; }

    private IList<CommentDto>? _postComments { get; set; }
    CommentModel commentModel = new CommentModel();

    private EditContext? editContext;
    private bool formInvalid = true;

    protected override void OnInitialized()
    {
        editContext = new EditContext(commentModel);
        editContext.OnFieldChanged += HandleFieldChanged;
    }

    private void HandleFieldChanged(object? sender, FieldChangedEventArgs e)
    {
        if (editContext is null) return;
        formInvalid = !editContext.Validate();
        StateHasChanged();
    }

    private async void HandleValidSubmit()
    {
        Logger.LogInformation("HandleValidSubmit called");
        Logger.LogInformation(commentModel.comment);
        var comment = new CommentCreateDto
        {
            Content = commentModel.comment,
            UserId = (await localStore.GetItemAsync<UserDetailsDto>("user")).oid,
            postid = Post.Id
        };
        var response = await _http.PostAsJsonAsync("api/Comment", comment);
        if (response.IsSuccessStatusCode)
        {
            uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true); // TODO: Add a legitimate error handling. (below)
        }
        else
        {
            Logger.LogCritical("Critical status code: " + response.StatusCode);
        }

        // Process the valid form
    }

    public void Dispose()
    {
        if (editContext is not null)
        {
            editContext.OnFieldChanged -= HandleFieldChanged;
        }
    }

    class CommentModel
    {
        public string comment { get; set; }
    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            _postComments = await _http.GetFromJsonAsync<List<CommentDto>>("api/Post/" + Post.Id + "/comments");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
}

@using ProjectBank.Core
@using ProjectBank.Shared.forms
@using Microsoft.AspNetCore.Components
@implements IDisposable
@inject ILogger<ApplyModal> _logger
@inject HttpClient _http
@inject NavigationManager _uriHelper;
@inject ILocalStorageService _localStore

<p>@Post?.Title</p>

<EditForm EditContext="@_editContext" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-floating my-3">
        <InputTextArea id="content" class="form-control" placeholder="Cover letter for your application"
            style="height: 100px" @bind-Value="_applyFormModel.Content">
        </InputTextArea>
        <label for="content">Cover letter</label>
    </div>
    <div class="d-grid gap-2 col-6 mx-auto">
        <button type="submit" class="btn btn-outline-primary btn-lg" disabled="@_formInvalid">Send application</button>
    </div>
</EditForm>

@code {

    [Parameter]
    public PostDetailsDto? Post { get; set; }
    [Parameter]
    public UserDetailsDto CurrentUser { get; set; }

    [CascadingParameter] 
    public BlazoredModalInstance ModalInstance { get; set; }

    private readonly ApplyFormModel _applyFormModel = new();

    private bool _formInvalid = true;
    private EditContext? _editContext;

    protected override void OnInitialized()
    {
        _editContext = new EditContext(_applyFormModel);
        _editContext.OnFieldChanged += HandleFieldChanged;
    }

    private void HandleFieldChanged(object? sender, FieldChangedEventArgs e)
    {
        if (_editContext is null) return;
        _formInvalid = !_editContext.Validate();
        StateHasChanged();
    }

    private async void HandleValidSubmit()
    {
        if (Post == null) return;
        var chatCreateDto = new ChatCreateDto()
        {
            ChatUserOids = new HashSet<string>() { CurrentUser.Oid, Post.UserOid },
            FromUserOid = CurrentUser.Oid,
            ProjectId = Post.Id
        };
        var chatResponse = await _http.PostAsJsonAsync("api/Chat", chatCreateDto);

        if (!chatResponse.IsSuccessStatusCode)
        {
            _logger.LogCritical("Critical status code: " + chatResponse.StatusCode);
            return;
        }

        var chat = await chatResponse.Content.ReadFromJsonAsync<ChatDto>();
        if (chat == null)
        {
            _logger.LogCritical("Critical chat is null");
            return;
        }
        var message = new ChatMessageCreateDto()
        {
            Content = _applyFormModel.Content,
            FromUserOid = CurrentUser.Oid,
            ChatId = chat.ChatId
        };
        var user = await _localStore.GetItemAsync<UserDetailsDto>("user");
        var notification = new NotificationCreateDto()
        {
            Title = "New Application",
            Content = $"{user.Name} has applied to {Post.Title}",
            UserOid = Post.UserOid,
            Link = $"/Messages/?chat={chat.ChatId}"
        };
        var messageResponse = await _http.PostAsJsonAsync("api/Chat/message", message);
        if (messageResponse.IsSuccessStatusCode)
        {
            await _http.PostAsJsonAsync("api/Notification", notification);
            _uriHelper.NavigateTo($"/Messages/?chat={chat.ChatId}");
        }
        else
        {
            _logger.LogCritical("Critical status code: " + messageResponse.StatusCode);
        }
    }

    public void Dispose()
    {
        if (_editContext is not null)
        {
            _editContext.OnFieldChanged -= HandleFieldChanged;
        }
    }

}
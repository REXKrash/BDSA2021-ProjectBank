@inherits InputBase<string>

<div class="form-control-wrapper">
    <p>Post tags:</p>
    <p class="italic">Split tags using a comma</p>
    <input class="form-control @CssClass visually-hidden" autocomplete="off" @onkeyup="KeyPressEventHandler" id="@Id" @bind-value:event="oninput"
           @bind-value="TagsString"/>
    <label class="tab-label form-control-label flex p-3 col-12 border rounded @_extraCss" for="@Id">
        @foreach (var tag in Tags)
        {
            <Tag Name="@tag"></Tag>
        }

    </label>
</div>

@code
{
    [Parameter]
    public string Id { get; set; }

    private string _tagsString;

    private string _extraCss;
    
    [Parameter]
    public string DefaultTags { get; set; }

    private string TagsString
    {
        get => _tagsString;
        set
        {
            _tagsString = value;
            UpdateTags();
            CurrentValue = value;
        }
    }

    private IEnumerable<string> Tags = new List<string>();

    protected override void OnInitialized()
    {
        TagsString = DefaultTags;
    }

    protected override bool TryParseValueFromString(string value, out string result,
        out string validationErrorMessage)
    {
        if (value.Trim().Equals(""))
        {
            result = default;
            validationErrorMessage = "You must give at least one tag";
        }
        else
        {
            result = value.Trim();
            validationErrorMessage = null;
        }
        return true;
    }

    private void KeyPressEventHandler(KeyboardEventArgs args)
    {
        var code = args.Code;
        if (code is not ("Enter" or "NumpadEnter") || args.ShiftKey) return;
        if (!TagsString.Trim().Equals("") && !TagsString.TrimEnd().EndsWith(",")) TagsString += ", ";
    }

    private void UpdateTags()
    {
        if (_tagsString == null || _tagsString.Trim().Equals(""))
        {
            Tags = new List<string>();
            return;
        }
        Tags = _tagsString.Split(",").Select(t => t.Trim());
        if (_tagsString.TrimEnd().EndsWith(",") || _tagsString.Trim().Equals(""))
        {
            _extraCss = "";
        }
        else
        {
            _extraCss = "moveLabelHighlighterBack";
            if(_tagsString.EndsWith(" "))
            {
                _extraCss += " endWithSpace";
            }
        }
    }
}
@using ProjectBank.Client.Extensions
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using ProjectBank.Core
@inject IJSRuntime JsRuntime
@inject HttpClient _http
@inject NavigationManager uriHelper;

<div class="d-flex flex-start my-4">
    <img class="rounded-circle shadow me-3" src="@ImgSrc" alt="avatar" width="40" height="40" />
    <div class="flex-grow-1 flex-shrink-1 border rounded py-1 px-2">
        <div class="d-flex justify-content-between align-items-center">
            <p class="mb-1">
                @Name <span class="small">- @Published.GetTimeSince()</span>
            </p>
            <button class="btn btn-danger" onclick="@DeleteComment">Delete</button>
        </div>
        <p class="small mb-0">
            @Content
        </p>
    </div>
</div>

@code {
    [Parameter]
    public int CommentID { get; set; }

    [Parameter]
    public int UserID { get; set; }

    private string ImgSrc { get; set; }


    private string Name { get; set; }

    [Parameter]
    public string Content { get; set; }

    [Parameter]
    public DateTime Published { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ImgSrc = "https://eu.ui-avatars.com/api/?name=Philip+Cronval&background=random";
            var _user = await _http.GetFromJsonAsync<UserDetailsDto>("api/User/" + UserID);
            Name = _user.Name;
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task DeleteComment(MouseEventArgs mouseEventArgs)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?"); // Confirm
        if (confirmed)
        {
            var _response = await _http.DeleteAsync($"api/Comment/{CommentID}");
            if (_response.IsSuccessStatusCode)
            {
                reloadPage();
            }
            else
            {
                await JsRuntime.InvokeAsync<bool>("alert", "Deletion of comment failed"); // Confirm
            }
        }
    }

    private void reloadPage()
    {
        uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
    }
}

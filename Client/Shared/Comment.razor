@using ProjectBank.Client.Extensions
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using ProjectBank.Core
@inject IJSRuntime _jsRuntime
@inject HttpClient _http
@inject NavigationManager _uriHelper;

<div class="d-flex flex-start my-4">
    <img class="rounded-circle shadow me-3" src="@ImgSrc" alt="avatar" width="40" height="40" />
    <div class="flex-grow-1 flex-shrink-1 border rounded py-1 px-2">
        <div class="d-flex justify-content-between align-items-center">
            <p class="mb-1">
                @Name <span class="small">- @Published.GetTimeSince()</span>
            </p>
            @if (CurrentUser.Oid.Equals(CurrentPost.UserOid) || CurrentUser.Oid.Equals(UserId))
            {
                <a class="link-danger" onclick="@DeleteComment">Delete</a>
            }
        </div>
        <p class="small mb-0">
            @Content
        </p>
    </div>
</div>

@code {

    [Parameter]
    public UserDetailsDto CurrentUser { get; set; }

    [Parameter]
    public PostDetailsDto CurrentPost { get; set; }

    [Parameter]
    public int CommentId { get; set; }

    [Parameter]
    public string UserId { get; set; }

    private string ImgSrc { get; set; }


    private string Name { get; set; }

    [Parameter]
    public string Content { get; set; }

    [Parameter]
    public DateTime Published { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var user = await _http.GetFromJsonAsync<UserDetailsDto>("api/User/" + UserId);
            Name = user.Name;
            ImgSrc = user.Image;
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task DeleteComment(MouseEventArgs mouseEventArgs)
    {
        var confirmed = await _jsRuntime.InvokeAsync<bool>("confirm", "Are you sure?"); // Confirm
        if (confirmed)
        {
            var response = await _http.DeleteAsync($"api/Comment/{CurrentPost.Id}/{CommentId}");
            if (response.IsSuccessStatusCode)
            {
                ReloadPage();
            }
            else
            {
                await _jsRuntime.InvokeAsync<bool>("alert", "Deletion of comment failed"); // Confirm
            }
        }
    }

    private void ReloadPage()
    {
        _uriHelper.NavigateTo(_uriHelper.Uri, forceLoad: true);
    }

}